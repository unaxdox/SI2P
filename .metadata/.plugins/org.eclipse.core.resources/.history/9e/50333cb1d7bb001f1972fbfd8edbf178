package eredua.bean;

import java.util.ArrayList;
import java.util.List;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;

import businessLogic.BLFacade;
import businessLogic.FacadeBean;
import domain.Ride;
import domain.User;

@ManagedBean(name = "gidaribidaiBean")
@SessionScoped
public class gidaribidaiBean {

	private String selectedUsername;
	private List<User> drivers;
	private List<String> dusernames;
	private List<Ride> rides;

	// Cargar los usernames de los conductores
	public void loadDrivers() {
		BLFacade facadeBL = FacadeBean.getBusinessLogic();
		drivers = facadeBL.getUserList(); // Usar la función de tu fachada para obtener los usernames
	}

	public void loadRides() {
		BLFacade facadeBL = FacadeBean.getBusinessLogic();
		if (selectedUsername != null && !selectedUsername.isEmpty()) {
			rides = facadeBL.getRidesByDriver(selectedUsername);
		} else {
			rides = new ArrayList<>(); // Limpia la lista si no hay selección
		}
	}

	// Getters y setters
	public String getSelectedUsername() {
		return selectedUsername;
	}

	public void setSelectedUsername(String selectedUsername) {
		this.selectedUsername = selectedUsername;
	}

	public List<String> getDriverUsernames() {
		if (dusernames == null) {
			dusernames = new ArrayList<>(); // Inicializa la lista si es null
		}
		dusernames.clear(); // Limpiar para evitar duplicados
		for (User user : drivers) {
			dusernames.add(user.getUsername());
		}
		return dusernames;
	}

	public void setDriverUsernames(List<String> driverUsernames) {
		this.dusernames = driverUsernames;
	}

	public List<Ride> getRides() {
		return rides;
	}

	public void setRides(List<Ride> rides) {
		this.rides = rides;
	}
}
